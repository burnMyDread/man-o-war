apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: node2
  name: node2
spec:
  containers:
  - command:
    - /bin/sh
    - -c
    - |
      UDS_WAIT=10
      for i in $(seq 1 100)
      do
        set -e
        if [ -S ${PRIVATE_CONFIG} ] && \
          [ "I'm up!" == "$(wget --timeout ${UDS_WAIT} -qO- 172.16.239.10${NODE_ID}:9000/upcheck)" ];
        then break
        else
          echo "Sleep ${UDS_WAIT} seconds. Waiting for TxManager."
          sleep ${UDS_WAIT}
        fi
      done
      DDIR=/qdata/dd
      rm -rf ${DDIR}
      mkdir -p ${DDIR}/keystore
      mkdir -p ${DDIR}/geth
      cp /examples/raft/nodekey${NODE_ID} ${DDIR}/geth/nodekey
      cp /examples/keys/key${NODE_ID} ${DDIR}/keystore/
      cat /examples/permissioned-nodes.json | sed 's/^\(.*\)@.*\?\(.*\)raftport=5040\([0-9]\)\(.*\)$/\1@172.16.239.1\3:21000?discport=0\&raftport=50400\4/g' > ${DDIR}/static-nodes.json
      cp ${DDIR}/static-nodes.json ${DDIR}/permissioned-nodes.json
      cat ${DDIR}/static-nodes.json
      GENESIS_FILE="/examples/istanbul-genesis.json"
      if [ "istanbul" == "raft" ]; then
        GENESIS_FILE="/examples/genesis.json"
      fi
      NETWORK_ID=$(cat ${GENESIS_FILE} | grep chainId | awk -F " " '{print $2}' | awk -F "," '{print $1}')
      GETH_ARGS_raft="--raft --raftport 50400"
      GETH_ARGS_istanbul="--emitcheckpoints --istanbul.blockperiod 1 --mine --minerthreads 1 --syncmode full"
      geth --datadir ${DDIR} init ${GENESIS_FILE}
      geth \
        --identity node${NODE_ID}-istanbul \
        --datadir ${DDIR} \
        --permissioned \
        --nodiscover \
        --verbosity 5 \
        --networkid ${NETWORK_ID} \
        --rpc \
        --rpcaddr 0.0.0.0 \
        --rpcport 8545 \
        --rpcapi admin,db,eth,debug,miner,net,shh,txpool,personal,web3,quorum,istanbul \
        --port 21000 \
        --unlock 0 \
        --password /examples/passwords.txt \
        ${GETH_ARGS_istanbul}
    env:
    - name: NODE_ID
      value: "2"
    - name: PRIVATE_CONFIG
      value: /qdata/tm/tm.ipc
    image: burnmydread/quorum-node:latest
    livenessProbe:
      exec:
        command:
        - wget
        - --spider
        - http://localhost:8545
      failureThreshold: 10
      periodSeconds: 5
      timeoutSeconds: 5
    name: node2
    ports:
    - containerPort: 8545
    resources: {}
    volumeMounts:
    - mountPath: /qdata
      name: vol2
  - command:
    - /bin/sh
    - -c
    - |
      DDIR=/qdata/tm
      rm -rf ${DDIR}
      mkdir -p ${DDIR}
      DOCKER_IMAGE="quorumengineering/tessera:0.7.3"
      TX_MANAGER=$(echo ${DOCKER_IMAGE} | sed 's/^.*\/\(.*\):.*$/\1/g')
      echo "TxManager: ${TX_MANAGER}"
      case ${TX_MANAGER}
      in
        tessera)
          cp /examples/keys/tm${NODE_ID}.pub ${DDIR}/tm.pub
          cp /examples/keys/tm${NODE_ID}.key ${DDIR}/tm.key
          #extract the tessera version from the jar
          TESSERA_VERSION=$(unzip -p /tessera/tessera-app.jar META-INF/MANIFEST.MF | grep Tessera-Version | cut -d" " -f2)
          echo "Tessera version (extracted from manifest file): ${TESSERA_VERSION}"
          #we're going to do a lexicographic comparison further down so we need "0.8" to be bigger than "0.8 " - thus adding -suffix
          TESSERA_VERSION="${TESSERA_VERSION}-suffix"

          TESSERA_CONFIG_TYPE=

          #the space in "0.8 " is important in the lexicographic comparision (space is lower value than most printable chars)
          #TODO - this will break when we get to version 0.10 (hopefully we would have moved to 1.x by then)
          if [ "${TESSERA_VERSION}" \> "0.8 " ]; then
              TESSERA_CONFIG_TYPE="-enhanced"
          fi

          echo Config type ${TESSERA_CONFIG_TYPE}

          #generating the two config flavors
          cat <<EOF > ${DDIR}/tessera-config.json
          {
              "useWhiteList": false,
              "jdbc": {
                  "username": "sa",
                  "password": "",
                  "url": "jdbc:h2:./${DDIR}/db;MODE=Oracle;TRACE_LEVEL_SYSTEM_OUT=0",
                  "autoCreateTables": true
              },
              "server": {
                  "port": 9000,
                  "hostName": "http://$(hostname -i)",
                  "sslConfig": {
                      "tls": "OFF",
                      "generateKeyStoreIfNotExisted": true,
                      "serverKeyStore": "${DDIR}/server-keystore",
                      "serverKeyStorePassword": "quorum",
                      "serverTrustStore": "${DDIR}/server-truststore",
                      "serverTrustStorePassword": "quorum",
                      "serverTrustMode": "TOFU",
                      "knownClientsFile": "${DDIR}/knownClients",
                      "clientKeyStore": "${DDIR}/client-keystore",
                      "clientKeyStorePassword": "quorum",
                      "clientTrustStore": "${DDIR}/client-truststore",
                      "clientTrustStorePassword": "quorum",
                      "clientTrustMode": "TOFU",
                      "knownServersFile": "${DDIR}/knownServers"
                  }
              },
              "peer": [
                  {
                      "url": "http://txmanager1:9000"
                  },
                  {
                      "url": "http://txmanager2:9000"
                  },
                  {
                      "url": "http://txmanager3:9000"
                  },
                  {
                      "url": "http://txmanager4:9000"
                  },
                  {
                      "url": "http://txmanager5:9000"
                  },
                  {
                      "url": "http://txmanager6:9000"
                  },
                  {
                      "url": "http://txmanager7:9000"
                  }
              ],
              "keys": {
                  "passwords": [],
                  "keyData": [
                      {
                          "config": $(cat ${DDIR}/tm.key),
                          "publicKey": "$(cat ${DDIR}/tm.pub)"
                      }
                  ]
              },
              "alwaysSendTo": [],
              "unixSocketFile": "${DDIR}/tm.ipc"
          }
      EOF

          cat <<EOF > ${DDIR}/tessera-config-enhanced.json
          {
            "useWhiteList": false,
            "jdbc": {
              "username": "sa",
              "password": "",
              "url": "jdbc:h2:./${DDIR}/db;MODE=Oracle;TRACE_LEVEL_SYSTEM_OUT=0",
              "autoCreateTables": true
            },
            "serverConfigs":[
            {
              "app":"ThirdParty",
              "enabled": true,
              "serverSocket":{
                "type":"INET",
                "port": 9080,
                "hostName": "http://$(hostname -i)"
              },
              "communicationType" : "REST"
            },
            {
              "app":"Q2T",
              "enabled": true,
              "serverSocket":{
                "type":"UNIX",
                "path":"${DDIR}/tm.ipc"
              },
              "communicationType" : "UNIX_SOCKET"
            },
            {
              "app":"P2P",
              "enabled": true,
              "serverSocket":{
                "type":"INET",
                "port": 9000,
                "hostName": "http://$(hostname -i)"
              },
              "sslConfig": {
                "tls": "OFF",
                "generateKeyStoreIfNotExisted": true,
                "serverKeyStore": "${DDIR}/server-keystore",
                "serverKeyStorePassword": "quorum",
                "serverTrustStore": "${DDIR}/server-truststore",
                "serverTrustStorePassword": "quorum",
                "serverTrustMode": "TOFU",
                "knownClientsFile": "${DDIR}/knownClients",
                "clientKeyStore": "${DDIR}/client-keystore",
                "clientKeyStorePassword": "quorum",
                "clientTrustStore": "${DDIR}/client-truststore",
                "clientTrustStorePassword": "quorum",
                "clientTrustMode": "TOFU",
                "knownServersFile": "${DDIR}/knownServers"
              },
              "communicationType" : "REST"
            }
            ],
            "peer": [
               {
                   "url": "http://txmanager1:9000"
               },
               {
                   "url": "http://txmanager2:9000"
               },
               {
                   "url": "http://txmanager3:9000"
               },
               {
                   "url": "http://txmanager4:9000"
               },
               {
                   "url": "http://txmanager5:9000"
               },
               {
                   "url": "http://txmanager6:9000"
               },
               {
                   "url": "http://txmanager7:9000"
               }
            ],
            "keys": {
              "passwords": [],
              "keyData": [
                {
                  "config": $(cat ${DDIR}/tm.key),
                  "publicKey": "$(cat ${DDIR}/tm.pub)"
                }
              ]
            },
            "alwaysSendTo": []
          }
      EOF

          java -Xms128M -Xmx128M -jar /tessera/tessera-app.jar -configfile ${DDIR}/tessera-config${TESSERA_CONFIG_TYPE}.json
          ;;
        constellation)
          echo "socket=\"${DDIR}/tm.ipc\"\npublickeys=[\"/examples/keys/tm${NODE_ID}.pub\"]\n" > ${DDIR}/tm.conf
          constellation-node \
            --url=http://$(hostname -i):9000/ \
            --port=9000 \
            --socket=${DDIR}/tm.ipc \
            --othernodes=http://172.16.239.101:9000/,http://172.16.239.102:9000/,http://172.16.239.103:9000/,http://172.16.239.104:9000/,http://172.16.239.105:9000/ \
            --publickeys=/examples/keys/tm${NODE_ID}.pub \
            --privatekeys=/examples/keys/tm${NODE_ID}.key \
            --storage=${DDIR} \
            --verbosity=4
          ;;
        *)
          echo "Invalid Transaction Manager"
          exit 1
          ;;
      esac
    env:
    - name: NODE_ID
      value: "2"
    image: burnmydread/quorum-txmanager:latest
    imagePullPolicy: Always
    livenessProbe:
      exec:
        command:
        - '[ -S /qdata/tm/tm.ipc ] || exit 1'
      failureThreshold: 20
      periodSeconds: 5
      timeoutSeconds: 5
    name: txmanager2
    ports:
    - containerPort: 9080
    resources: {}
    volumeMounts:
    - mountPath: /qdata
      name: vol2   
  hostname: txmanager2
  restartPolicy: OnFailure
  volumes:
  - name: vol2
    persistentVolumeClaim:
      claimName: vol2
  - name: node2-claim1
    persistentVolumeClaim:
      claimName: node2-claim1
      readOnly: true
  - name: txmanager2-claim1
    persistentVolumeClaim:
      claimName: txmanager2-claim1
      readOnly: true  
status: {}
